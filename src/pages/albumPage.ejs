<!DOCTYPE HTML>
<!--
	Phantom by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
-->
<html>
	<head>
		<!-- <% include ../partials/head %> -->
		<title>TITLE</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
		<link rel="stylesheet" href="../../../assets/css/main.css" />
		<link rel="stylesheet" href="../../../assets/photoswipe/dist/photoswipe.css" />
		<link rel="stylesheet" href="../../../assets/photoswipe/dist/default-skin/default-skin.css" />
		<noscript><link rel="stylesheet" href="../../../assets/css/noscript.css" /></noscript>
	</head>
	<body class="is-preload">
			<div id="wrapper">
				<!-- Header -->
					<header id="header">
						<div class="inner">

							<!-- Logo -->
								<a href="../../../index.html" class="logo">
									<span class="symbol"><img src="../../../images/heart.svg" alt="" /></span><span class="title">ExampleAlbumPage</span>
								</a>

							<!-- Nav -->
								<div class="nav">
									<ul>
										<li><a href="#menu">Menu</a></li>
									</ul>
								</div>

						</div>
					</header>

				<!-- Menu -->
					<nav id="menu">
						<h2>Menu</h2>
						<ul>
							<li><a href="../../../index.html">Home</a></li>
						</ul>
					</nav>

					<div id="main">
						<div class="inner">

							<h1>Text with photo grid</h1>

							<p><%= album.text %></p>

							<section class="tiles">
								<% album.imgs.forEach((imgSrc) => { %>
									<article>
										<span class="image">
											<img src=<%= '../../../images/albums/' + imgSrc %> alt="" />
										</span>
										<a href="#">
											<!-- <h2>Img</h2> -->
											<div class="content">
												<p>the content</p>
											</div>
										</a>
									</article>
								<% }); %>
							</section>

						</div>
					</div>

				<% include ../partials/footer %>
			</div>

		<!-- Root element of PhotoSwipe. Must have class pswp. -->
			<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

				<!-- Background of PhotoSwipe.
				It's a separate element as animating opacity is faster than rgba(). -->
				<div class="pswp__bg"></div>

				<!-- Slides wrapper with overflow:hidden. -->
				<div class="pswp__scroll-wrap">

					<!-- Container that holds slides.
					PhotoSwipe keeps only 3 of them in the DOM to save memory.
					Don't modify these 3 pswp__item elements, data is added later on. -->
					<div class="pswp__container">
						<div class="pswp__item"></div>
						<div class="pswp__item"></div>
						<div class="pswp__item"></div>
					</div>

					<!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
					<div class="pswp__ui pswp__ui--hidden">

						<div class="pswp__top-bar">

							<!--  Controls are self-explanatory. Order can be changed. -->

							<div class="pswp__counter"></div>

							<button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

							<button class="pswp__button pswp__button--share" title="Share"></button>

							<button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

							<button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

							<!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->
							<!-- element will get class pswp__preloader--active when preloader is running -->
							<div class="pswp__preloader">
								<div class="pswp__preloader__icn">
									<div class="pswp__preloader__cut">
										<div class="pswp__preloader__donut"></div>
									</div>
								</div>
							</div>
						</div>

						<div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
							<div class="pswp__share-tooltip"></div>
						</div>

						<button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
						</button>

						<button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
						</button>

						<div class="pswp__caption">
							<div class="pswp__caption__center"></div>
						</div>

					</div>

				</div>

			</div>

		<!-- Scripts -->
			<script src="../../../assets/js/jquery.min.js"></script>
			<script src="../../../assets/js/browser.min.js"></script>
			<script src="../../../assets/js/breakpoints.min.js"></script>
			<script src="../../../assets/js/util.js"></script>
			<script src="../../../assets/js/main.js"></script>

			<script src="../../../assets/photoswipe/dist/photoswipe.min.js"></script>
			<script src="../../../assets/photoswipe/dist/photoswipe-ui-default.min.js"></script>

			<script>
			var initPhotoSwipeFromDOM = function(gallerySelector) {
				// parse slide data (url, title, size ...) from DOM elements
				// (children of gallerySelector)
				var parseThumbnailElements = function(el) {
					var thumbElements = el.childNodes,
					numNodes = thumbElements.length,
					items = [],
					articleEl,
					linkEl,
					size,
					item;
					for(var i = 0; i < numNodes; i++) {
						articleEl = thumbElements[i]; // <article> element
						// include only element nodes
						if(articleEl.nodeType !== 1) {
							continue;
						}
						linkEl = articleEl.children[0].children[0]; //child <img> of child span
						// get data-size if including dynamic size
						// size = linkEl.getAttribute('data-size').split('x');
						// create slide object
						item = {
							src: linkEl.getAttribute('src'),
							w: 1200,
							h: 900
							// w: parseInt(size[0], 10),
							// h: parseInt(size[1], 10)
						};
						item.el = articleEl; // save link to element for getThumbBoundsFn
						items.push(item);
					}
					return items;
				};
				// find nearest parent element
				var closest = function closest(el, fn) {
					return el && ( fn(el) ? el : closest(el.parentNode, fn) );
				};
				// triggers when user clicks on thumbnail
				var onThumbnailsClick = function(e) {
					e = e || window.event;
					e.preventDefault ? e.preventDefault() : e.returnValue = false;
					var eTarget = e.target || e.srcElement;
					// find root element of slide
					var clickedListItem = closest(eTarget, function(el) {
						return (el.tagName && el.tagName.toUpperCase() === 'ARTICLE');
					});
					if(!clickedListItem) {
						return;
					}
					// find index of clicked item by looping through all child nodes
					// alternatively, you may define index via data- attribute
					var clickedGallery = clickedListItem.parentNode,
					childNodes = clickedListItem.parentNode.childNodes,
					numChildNodes = childNodes.length,
					nodeIndex = 0,
					index;
					for (var i = 0; i < numChildNodes; i++) {
						if(childNodes[i].nodeType !== 1) {
							continue;
						}
						if(childNodes[i] === clickedListItem) {
							index = nodeIndex;
							break;
						}
						nodeIndex++;
					}
					if(index >= 0) {
						// open PhotoSwipe if valid index found
						openPhotoSwipe( index, clickedGallery );
					}
					return false;
				};
				// parse picture index and gallery index from URL (#&pid=1&gid=2)
				var photoswipeParseHash = function() {
					var hash = window.location.hash.substring(1),
					params = {};
					if(hash.length < 5) {
						return params;
					}
					var vars = hash.split('&');
					for (var i = 0; i < vars.length; i++) {
						if(!vars[i]) {
							continue;
						}
						var pair = vars[i].split('=');
						if(pair.length < 2) {
							continue;
						}
						params[pair[0]] = pair[1];
					}
					if(params.gid) {
						params.gid = parseInt(params.gid, 10);
					}
					return params;
				};
				var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
					var pswpElement = document.querySelectorAll('.pswp')[0],
					gallery,
					options,
					items;
					items = parseThumbnailElements(galleryElement);
					// define options (if needed)
					options = {
						// define gallery index (for URL)
						// data-pswp-uid is set with the onclick method of galleryElements
						galleryUID: galleryElement.getAttribute('data-pswp-uid'),
						getThumbBoundsFn: function(index) {
							// See Options -> getThumbBoundsFn section of documentation for more info
							var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
							pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
							rect = thumbnail.getBoundingClientRect();
							return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
						}
					};
					// PhotoSwipe opened from URL
					if(fromURL) {
						if(options.galleryPIDs) {
							// parse real index when custom PIDs are used
							// http://photoswipe.com/documentation/faq.html#custom-pid-in-url
							for(var j = 0; j < items.length; j++) {
								if(items[j].pid == index) {
									options.index = j;
									break;
								}
							}
						} else {
							// in URL indexes start from 1
							options.index = parseInt(index, 10) - 1;
						}
					} else {
						options.index = parseInt(index, 10);
					}
					// exit if index not found
					if( isNaN(options.index) ) {
						return;
					}
					if(disableAnimation) {
						options.showAnimationDuration = 0;
					}
					// Pass data to PhotoSwipe and initialize it
					gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
					gallery.init();
				};
				// loop through all gallery elements and bind events
				var galleryElements = document.querySelectorAll( gallerySelector );
				for(var i = 0, l = galleryElements.length; i < l; i++) {
					galleryElements[i].setAttribute('data-pswp-uid', i+1);
					galleryElements[i].onclick = onThumbnailsClick;
				}
				// Parse URL and open gallery if it contains #&pid=3&gid=1
				var hashData = photoswipeParseHash();
				if(hashData.pid && hashData.gid) {
					openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
				}
			};
			// execute above function
			initPhotoSwipeFromDOM('.tiles');
			</script>

	</body>
</html>
